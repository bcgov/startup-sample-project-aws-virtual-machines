# This workflow will apply the terraform scripts which would deploy the recquied infrastructure and the startup-sample-app

name: Deploy
on:
  workflow_dispatch:
    inputs:
      env:
        description: select the environment
        type: environment
        required: true

env:
  TF_VERSION: 1.5.7
  environment: ${{ inputs.env }}
  SHA: ${{ github.sha }}
  GIT_URL: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY
  Branch: ${GITHUB_REF##*/}

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  build:
    environment: ${{ inputs.env }}
    runs-on: ubuntu-latest
    steps:
      - name: checkout the repo and building the Backend
        uses: actions/checkout@v3

      - name: Extract branch name
        shell: bash
        run: echo ${GITHUB_REF##*/}

      - name: setting variables
        run: |
          cd src/terraform
          cat <<EOF > dev.auto.tfvars
          sha = "${{ env.SHA }}"
          git_url= "${{ env.GIT_URL }}"
          branch = "${{ env.Branch }}"
          target_env = "${{ env.environment }}"
          EOF

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ vars.TERRAFORM_DEPLOY_ROLE_ARN }}
          aws-region: ca-central-1

      - name: Deploying startup-sample-project using terraform
        run: |
          cd src/terraform
          cat <<EOF > backend.hcl
          bucket = "${{ vars.S3_BACKEND_NAME }}"
          key = "virtual-machine-app.tfstate"
          dynamodb_table = "terraform-remote-state-lock-${{ vars.LICENCEPLATE }}"
          EOF

          terraform init -backend-config=backend.hcl -input=false
          terraform apply -auto-approve -input=false

      - name: Extract outputs from Terraform
        id: tf-outputs
        run: |
          terraform output -json > outputs.json
          echo "S3_BUCKET_ARN=$(jq -r .s3_bucket_arn.value outputs.json)" >> $GITHUB_ENV
          echo "CF_DOMAIN=$(jq -r .cloudfront.value.domain_name outputs.json)" >> $GITHUB_ENV
          echo "CF_DISTRIBUTION_ID=$(jq -r .cloudfront.value.distribution_id outputs.json)" >> $GITHUB_ENV
          echo "API_GW_URL=$(jq -r .apigw_url.value outputs.json)" >> $GITHUB_ENV
        working-directory: src/terraform

      - name: Build and deploy the front-end
        run: |
          cd src/web
          echo "REACT_APP_API_BASE_URL=$API_GW_URL" > .env
          npm install
          npm run build
          aws s3 sync --delete ./build s3://$(echo "$S3_BUCKET_ARN" | cut -d: -f6)
          aws cloudfront create-invalidation --distribution-id $CF_DISTRIBUTION_ID --paths "/*"
