# This workflow will apply the terraform scripts which would deploy the recquied infrastructure and the startup-sample-app

name: Pull Request

on:
  pull_request:
    branches:
      - main
      - dev
      - test
env:
  TF_VERSION: 1.5.7
  environment: ${{ github.base_ref }}
  GIT_URL: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY
  SHA: ${{github.event.pull_request.head.sha}}
  Branch: ${GITHUB_HEAD_REF}

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  env_selector:
    runs-on: ubuntu-latest
    steps:
      - name: env selector
        id: identify
        run: |
          if [ ${GITHUB_BASE_REF} = "main" ];then export github_env='prod'; else export github_env=${GITHUB_BASE_REF}; fi
          echo "name=${github_env}" >> "$GITHUB_ENV"

    outputs:
      github_env: ${{ env.name }}

  build:
    needs: env_selector
    environment: ${{ needs.env_selector.outputs.github_env }}
    runs-on: ubuntu-latest
    steps:
      - name: prod check
        if: ${{ github.base_ref == 'main' }}
        run: echo "environment=prod" >> $GITHUB_ENV

      - name: checkout the repo and building the Backend
        uses: actions/checkout@v3

      - name: env name
        run: echo the will apply on ${{ needs.env_selector.outputs.github_env }}

      - name: setting variables
        run: |
          cd src/terraform/
          cat <<EOF > dev.auto.tfvars
          sha = "${{ env.SHA }}"
          git_url= "${{ env.GIT_URL }}"
          branch ="${{ env.Branch }}"
          target_env = "${{ env.environment }}"
          EOF

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ vars.TERRAFORM_DEPLOY_ROLE_ARN }}
          aws-region: ca-central-1

      - name: Planning startup-sample-project using terraform
        uses: hashicorp/setup-terraform@v2
      - run: |
          cd src/terraform
          cat <<EOF > backend.hcl
          bucket = "${{ vars.S3_BACKEND_NAME }}"
          key = "virtual-machine.tfstate"
          dynamodb_table = "terraform-remote-state-lock-${{ vars.LICENCEPLATE }}"
          EOF

          terraform init -backend-config=backend.hcl -input=false
          terraform plan -input=false

      - name: Build the front-end
        run: |
          cd src/web
          npm install
          npm run build
